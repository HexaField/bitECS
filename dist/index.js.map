{"version":3,"file":"index.js","sources":["../src/Storage.ts","../src/Util.ts","../src/Entity.ts","../src/Query.ts","../src/Component.ts","../src/World.ts","../src/System.ts","../src/Serialize.ts","../src/index.ts"],"sourcesContent":["export const TYPES_ENUM = {\n  i8: 'i8',\n  ui8: 'ui8',\n  ui8c: 'ui8c',\n  i16: 'i16',\n  ui16: 'ui16',\n  i32: 'i32',\n  ui32: 'ui32',\n  f32: 'f32',\n  f64: 'f64'\n}\n\nexport const TYPES_NAMES = {\n  i8: 'Int8',\n  ui8: 'Uint8',\n  ui8c: 'Uint8Clamped',\n  i16: 'Int16',\n  ui16: 'Uint16',\n  i32: 'Int32',\n  ui32: 'Uint32',\n  f32: 'Float32',\n  f64: 'Float64'\n}\n\nexport const TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array\n}\n\nconst UNSIGNED_MAX = {\n  uint8: 2**8,\n  uint16: 2**16,\n  uint32: 2**32\n}\n\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\n\nexport const $storeRef = Symbol('storeRef')\nexport const $storeSize = Symbol('storeSize')\nexport const $storeMaps = Symbol('storeMaps')\nexport const $storeFlattened = Symbol('storeFlattened')\nexport const $storeBase = Symbol('storeBase')\nexport const $storeType = Symbol('storeType')\n\nexport const $storeArrayCounts = Symbol('storeArrayCount')\nexport const $storeSubarrays = Symbol('storeSubarrays')\nexport const $subarrayCursors = Symbol('subarrayCursors')\nexport const $subarray = Symbol('subarray')\nexport const $subarrayFrom = Symbol('subarrayFrom')\nexport const $subarrayTo = Symbol('subarrayTo')\nexport const $parentArray = Symbol('subStore')\nexport const $tagStore = Symbol('tagStore')\n\nexport const $queryShadow = Symbol('queryShadow')\nexport const $serializeShadow = Symbol('serializeShadow')\n\nexport const $indexType = Symbol('indexType')\nexport const $indexBytes = Symbol('indexBytes')\n\nconst stores = {}\n\nexport const resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\n  const newTa = new ta.constructor(newBuffer)\n  newTa.set(ta, 0)\n  return newTa\n}\n\nexport const createShadow = (store: any[], key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0).fill(0)\n    store[key] = store.map((_,eid) => {\n      const from = store[eid][$subarrayFrom]\n      const to = store[eid][$subarrayTo]\n      return shadowStore.subarray(from, to)\n    })\n  } else {\n    store[key] = store.slice(0).fill(0)\n  }\n}\n\nconst resizeSubarray = (metadata, store, size) => {\n  const cursors = metadata[$subarrayCursors]\n  const type = store[$storeType]\n  const length = store[0].length\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? 'ui8'\n      : length <= UNSIGNED_MAX.uint16\n        ? 'ui16'\n        : 'ui32'\n\n  const arrayCount = metadata[$storeArrayCounts][type]\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n  \n  // // for threaded impl\n  // // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n  // // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n  // // const buffer = new SharedArrayBuffer(totalBytes)\n\n  const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n  console.log(array.length, metadata[$storeSubarrays][type].length, type)\n\n  array.set(metadata[$storeSubarrays][type])\n  \n  metadata[$storeSubarrays][type] = array\n  \n  array[$indexType] = TYPES_NAMES[indexType]\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n\n  // create buffer for type if it does not already exist\n  // if (!metadata[$storeSubarrays][type]) {\n  //   const arrayCount = metadata[$storeArrayCounts][type]\n  //   const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n\n  //   // for threaded impl\n  //   // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n  //   // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n  //   // const buffer = new SharedArrayBuffer(totalBytes)\n\n  //   const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n  //   // console.log(`array of type ${type} has size of ${array.length}`)\n\n  //   metadata[$storeSubarrays][type] = array\n\n  //   array[$indexType] = TYPES_NAMES[indexType]\n  //   array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  // }\n\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n}\n\nconst resizeRecursive = (metadata, store, size) => {\n  Object.keys(store).forEach(key => {\n    const ta = store[key]\n    if (Array.isArray(ta)) {\n      // store[$storeSubarrays] = {}\n      // store[$subarrayCursors] = Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {})\n      resizeSubarray(metadata, ta, size)\n      store[$storeFlattened].push(ta)\n    } else if (ArrayBuffer.isView(ta)) {\n      store[key] = resize(ta, size)\n      store[$storeFlattened].push(store[key])\n    } else if (typeof ta === 'object') {\n      resizeRecursive(metadata, store[key], size)\n    }\n  })\n}\n\nexport const resizeStore = (store, size) => {\n  if (store[$tagStore]) return\n  store[$storeSize] = size\n  store[$storeFlattened].length = 0\n  Object.keys(store[$subarrayCursors]).forEach(k => {\n    store[$subarrayCursors][k] = 0\n  })\n  resizeRecursive(store, store, size)\n}\n\nexport const resetStore = store => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      ta.fill(0)\n    })\n    Object.keys(store[$storeSubarrays]).forEach(key => {\n      store[$storeSubarrays][key].fill(0)\n    })\n  }\n}\n\nexport const resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\n      else ta[eid].fill(0)\n    })\n  }\n}\n\nconst createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\n  const buffer = new ArrayBuffer(totalBytes)\n  return new TYPES[type](buffer)\n}\n\nexport const parentArray = store => store[$parentArray]\n\nconst createArrayStore = (metadata, type, length) => {\n  const size = metadata[$storeSize]\n  const store = Array(size).fill(0)\n  store[$storeType] = type\n\n  const cursors = metadata[$subarrayCursors]\n  const indexType =\n    length < UNSIGNED_MAX.uint8\n      ? 'ui8'\n      : length < UNSIGNED_MAX.uint16\n        ? 'ui16'\n        : 'ui32'\n\n  if (!length) throw new Error('bitECS - Must define component array length')\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\n\n  // create buffer for type if it does not already exist\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayCount = metadata[$storeArrayCounts][type]\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n    \n    // for threaded impl\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n    // console.log(`array of type ${type} has size of ${array.length}`)\n\n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  // pre-generate subarrays for each eid\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n\n  return store\n}\n\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\n\nexport const createStore = (schema, size) => {\n  const $store = Symbol('store')\n\n  if (!schema || !Object.keys(schema).length) {\n    // tag component\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    }\n    return stores[$store]\n  }\n\n  schema = JSON.parse(JSON.stringify(schema))\n\n  const arrayCounts = {}\n  const collectArrayCounts = s => {\n    const keys = Object.keys(s)\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\n        arrayCounts[s[k][0]]++\n      } else if (s[k] instanceof Object) {\n        collectArrayCounts(s[k])\n      }\n    }\n  }\n  collectArrayCounts(schema)\n\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayCounts]: arrayCounts\n  }\n\n  if (schema instanceof Object && Object.keys(schema).length) {\n\n    const recursiveTransform = (a, k) => {\n\n      if (typeof a[k] === 'string') {\n\n        a[k] = createTypeStore(a[k], size)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n\n      } else if (isArrayType(a[k])) {\n        \n        const [type, length] = a[k]\n        a[k] = createArrayStore(metadata, type, length)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n        // Object.seal(a[k])\n\n      } else if (a[k] instanceof Object) {\n        \n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\n        // Object.seal(a[k])\n        \n      }\n\n      return a\n    }\n\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\n    stores[$store][$storeBase] = () => stores[$store]\n\n    // Object.seal(stores[$store])\n\n    return stores[$store]\n\n  }\n}\n\nexport const free = (store) => {\n  delete stores[store[$storeRef]]\n}","export const Uint32SparseSet = (length) => {\n  const dense = new Uint32Array(length)\n  const sparse = new Uint32Array(length)\n\n  let cursor = 0\n  // ;(dense as any).count = () => cursor + 1\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = cursor\n    dense[cursor] = val\n\n    cursor++\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense[cursor]\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n\n    cursor--\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}\n\nexport const SparseSet = () => {\n  const dense = []\n  const sparse = []\n\n  dense.sort = function (comparator) {\n    const result = Array.prototype.sort.call(this, comparator)\n\n    for(let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i\n    }\n    \n    return result\n  }\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = dense.push(val) - 1\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense.pop()\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}","import { resizeComponents } from './Component'\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query'\nimport { resizeWorlds } from './World'\nimport { setSerializationResized } from './Serialize'\n\nexport const $entityMasks = Symbol('entityMasks')\nexport const $entityComponents = Symbol('entityMasks')\nexport const $entitySparseSet = Symbol('entitySparseSet')\nexport const $entityArray = Symbol('entityArray')\nexport const $entityIndices = Symbol('entityIndices')\nexport const $removedEntities = Symbol('removedEntities')\n\nlet defaultSize = 100000\n\n// need a global EID cursor which all worlds and all components know about\n// so that world entities can posess entire rows spanning all component tables\nlet globalEntityCursor = 0\nlet globalSize = defaultSize\nlet resizeThreshold = () => globalSize - (globalSize / 5)\n\nexport const getGlobalSize = () => globalSize\n\n// removed eids should also be global to prevent memory leaks\nconst removed = []\n\nexport const resetGlobals = () => {\n  globalSize = defaultSize\n  globalEntityCursor = 0\n  removed.length = 0\n}\n\nexport const getDefaultSize = () => defaultSize\n\n/**\n * Sets the default maximum number of entities for worlds and component stores.\n *\n * @param {number} size\n */\nexport const setDefaultSize = size => { \n  defaultSize = size\n  resetGlobals()\n}\n\nexport const getEntityCursor = () => globalEntityCursor\nexport const getRemovedEntities = () => removed\n\nexport const eidToWorld = new Map()\n\n/**\n * Adds a new entity to the specified world.\n *\n * @param {World} world\n * @returns {number} eid\n */\nexport const addEntity = (world) => {\n  \n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\n  world[$entitySparseSet].add(eid)\n  eidToWorld.set(eid, world)\n\n  if (globalEntityCursor >= defaultSize) {\n    console.error(`bitECS - max entities of ${defaultSize} reached, increase with setDefaultSize function.`)\n  }\n  // if data stores are 80% full\n  // if (globalEntityCursor >= resizeThreshold()) {\n  //   // grow by half the original size rounded up to a multiple of 4\n  //   const size = globalSize\n  //   const amount = Math.ceil((size/2) / 4) * 4\n  //   const newSize = size + amount\n  //   globalSize = newSize\n  //   resizeWorlds(newSize)\n  //   resizeComponents(newSize)\n  //   setSerializationResized(true)\n  //   console.info(`👾 bitECS - resizing all data stores from ${size} to ${size+amount}`)\n  // }\n\n  world[$notQueries].forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n\n  world[$entityComponents].set(eid, new Set())\n\n  return eid\n}\n\n/**\n * Removes an existing entity from the specified world.\n *\n * @param {World} world\n * @param {number} eid\n */\nexport const removeEntity = (world, eid) => {\n  // Check if entity is already removed\n  if (!world[$entitySparseSet].has(eid)) return\n\n  // Remove entity from all queries\n  // TODO: archetype graph\n  world[$queries].forEach(q => {\n    queryRemoveEntity(world, q, eid)\n  })\n\n  // Free the entity\n  removed.push(eid)\n\n  // remove all eid state from world\n  world[$entitySparseSet].remove(eid)\n  world[$entityComponents].delete(eid)\n\n  // Clear entity bitmasks\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\n}\n\n/**\n *  Returns an array of components that an entity possesses.\n *\n * @param {*} world\n * @param {*} eid\n */\nexport const getEntityComponents = (world, eid) => Array.from(world[$entityComponents].get(eid))","import { SparseSet } from './Util'\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage'\nimport { $componentMap, registerComponent } from './Component'\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity'\n\nexport function Not(c) { return function QueryNot() { return c } }\nexport function Or(c) { return function QueryOr() { return c } }\nexport function Changed(c) { return function QueryChanged() { return c } }\n\nexport const $queries = Symbol('queries')\nexport const $notQueries = Symbol('notQueries')\nexport const $queryMap = Symbol('queryMap')\nexport const $dirtyQueries = Symbol('$dirtyQueries')\nexport const $queryComponents = Symbol('queryComponents')\nexport const $enterQuery = Symbol('enterQuery')\nexport const $exitQuery = Symbol('exitQuery')\n\n/**\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const enterQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.entered.splice(0)\n}\n\n/**\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const exitQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.exited.splice(0)\n}\n\nexport const registerQuery = (world, query) => {\n\n  const components = []\n  const notComponents = []\n  const changedComponents = []\n\n  query[$queryComponents].forEach(c => {\n    if (typeof c === 'function') {\n      const comp = c()\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\n      if (c.name === 'QueryNot') {\n        notComponents.push(comp)\n      }\n      if (c.name === 'QueryChanged') {\n        changedComponents.push(comp)\n        components.push(comp)\n      }\n    } else {\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\n      components.push(c)\n    }\n  })\n\n\n  const mapComponents = c => world[$componentMap].get(c)\n\n  const allComponents = components.concat(notComponents).map(mapComponents)\n\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\n  const sparseSet = SparseSet()\n\n  const archetypes = []\n  // const changed = SparseSet()\n  const changed = []\n  const toRemove = []\n  const entered = []\n  const exited = []\n\n  const generations = allComponents\n    .map(c => c.generationId)\n    .reduce((a,v) => {\n      if (a.includes(v)) return a\n      a.push(v)\n      return a\n    }, [])\n\n  const reduceBitflags = (a,c) => {\n    if (!a[c.generationId]) a[c.generationId] = 0\n    a[c.generationId] |= c.bitflag\n    return a\n  }\n  const masks = components\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  const notMasks = notComponents\n    .map(mapComponents)\n    .reduce((a,c) => {\n      if (!a[c.generationId]) {\n        a[c.generationId] = 0\n      }\n      a[c.generationId] |= c.bitflag\n      return a\n    }, {})\n\n  // const orMasks = orComponents\n  //   .map(mapComponents)\n  //   .reduce(reduceBitmasks, {})\n\n  const hasMasks = allComponents\n    .reduce(reduceBitflags, {})\n\n  const flatProps = components\n    .filter(c => !c[$tagStore])\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\n    .reduce((a,v) => a.concat(v), [])\n\n  const shadows = flatProps.map(prop => {\n      const $ = Symbol()\n      createShadow(prop, $)\n      return prop[$]\n  }, [])\n\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components,\n    notComponents,\n    changedComponents,\n    masks,\n    notMasks,\n    // orMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows,\n  })\n  \n  world[$queryMap].set(query, q)\n  world[$queries].add(q)\n  \n  components.map(mapComponents).forEach(c => {\n    c.queries.add(q)\n  })\n  notComponents.map(mapComponents).forEach(c => {\n    c.notQueries.add(q)\n  })\n  changedComponents.map(mapComponents).forEach(c => {\n    c.changedQueries.add(q)\n  })\n\n  if (notComponents.length) world[$notQueries].add(q)\n\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid)) continue\n    if (queryCheckEntity(world, q, eid)) {\n      queryAddEntity(q, eid)\n    }\n  }\n}\n\nconst diff = (q, clearDiff) => {\n  if (clearDiff) q.changed = []\n  const { flatProps, shadows } = q\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i]\n    let dirty = false\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid]\n      const shadow = shadows[pid]\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i = 0; i < prop[eid].length; i++) {\n          if (prop[eid][i] !== shadow[eid][i]) {\n            dirty = true\n            shadow[eid][i] = prop[eid][i]\n          }\n        }\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true\n          shadow[eid] = prop[eid]\n        }\n      }\n    }\n    if (dirty) q.changed.push(eid)\n  }\n  return q.changed\n}\n\n// const queryEntityChanged = (q, eid) => {\n//   if (q.changed.has(eid)) return\n//   q.changed.add(eid)\n// }\n\n// export const entityChanged = (world, component, eid) => {\n//   const { changedQueries } = world[$componentMap].get(component)\n//   changedQueries.forEach(q => {\n//     const match = queryCheckEntity(world, q, eid)\n//     if (match) queryEntityChanged(q, eid)\n//   })\n// }\n\n\n/**\n * Defines a query function which returns a matching set of entities when called on a world.\n *\n * @param {array} components\n * @returns {function} query\n */\n\nexport const defineQuery = (components) => {\n  if (components === undefined || components[$componentMap] !== undefined) {\n    return world => world ? world[$entityArray] : components[$entityArray]\n  }\n\n  const query = function (world, clearDiff=true) {\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\n\n    const q = world[$queryMap].get(query)\n\n    commitRemovals(world)\n\n    if (q.changedComponents.length) return diff(q, clearDiff)\n    // if (q.changedComponents.length) return q.changed.dense\n\n    return q.dense\n  }\n  query[$queryComponents] = components\n  return query\n}\n\n// TODO: archetype graph\nexport const queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q\n  // let or = true\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i]\n    const qMask = masks[generationId]\n    const qNotMask = notMasks[generationId]\n    // const qOrMask = orMasks[generationId]\n    const eMask = world[$entityMasks][generationId][eid]\n    \n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\n    //   continue\n    // }\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false\n    }\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const queryCheckComponent = (q, c) => {\n  const { generationId, bitflag } = c\n  const { hasMasks } = q\n  const mask = hasMasks[generationId]\n  return (mask & bitflag) === bitflag\n}\n\nexport const queryAddEntity = (q, eid) => {\n  if (q.has(eid)) return\n  q.add(eid)\n  q.entered.push(eid)\n}\n\nconst queryCommitRemovals = (q) => {\n  while (q.toRemove.length) {\n    q.remove(q.toRemove.pop())\n  }\n}\n\nexport const commitRemovals = (world) => {\n  world[$dirtyQueries].forEach(queryCommitRemovals)\n  world[$dirtyQueries].clear()\n}\n\nexport const queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid)) return\n  q.toRemove.push(eid)\n  world[$dirtyQueries].add(q)\n  q.exited.push(eid)\n}\n\n\n/**\n * Resets a Changed-based query, clearing the underlying list of changed entities.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  q.changed = []\n}\n\n/**\n * Removes a query from a world.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  world[$queries].delete(q)\n  world[$queryMap].delete(query)\n}","import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage'\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity } from './Query'\nimport { $bitflag, $size } from './World'\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents } from './Entity'\n\nexport const $componentMap = Symbol('componentMap')\n\nexport const components = []\n\nexport const resizeComponents = (size) => {\n  components.forEach(component => resizeStore(component, size))\n}\n\n\n/**\n * Defines a new component store.\n *\n * @param {object} schema\n * @returns {object}\n */\nexport const defineComponent = (schema?) => {\n  const component = createStore(schema, getDefaultSize())\n  if (schema && Object.keys(schema).length) components.push(component)\n  return component\n}\n\nexport const incrementBitflag = (world) => {\n  world[$bitflag] *= 2\n  if (world[$bitflag] >= 2**32) {\n    world[$bitflag] = 1\n    world[$entityMasks].push(new Uint32Array(world[$size]))\n  }\n}\n\n\n/**\n * Registers a component with a world.\n *\n * @param {World} world\n * @param {Component} component\n */\nexport const registerComponent = (world, component) => {\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\n\n  const queries = new Set()\n  const notQueries = new Set()\n  const changedQueries = new Set()\n\n  world[$queries].forEach(q => {\n    if (q.notComponents.includes(component)) {\n      queries.add(q)\n    } else if (q.changedComponents.includes(component)) {\n      changedQueries.add(q)\n    } else if (q.components.includes(component)) {\n      notQueries.add(q)\n    }\n  })\n\n  world[$componentMap].set(component, { \n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries,\n  })\n\n  if (component[$storeSize] < world[$size]) {\n    resizeStore(component, world[$size])\n  }\n\n  incrementBitflag(world)\n}\n\n/**\n * Registers multiple components with a world.\n *\n * @param {World} world\n * @param {Component} components\n */\nexport const registerComponents = (world, components) => {\n  components.forEach(c => registerComponent(world, c))\n}\n\n/**\n * Checks if an entity has a component.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @returns {boolean}\n */\nexport const hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component)\n  if (!registeredComponent) return\n  const { generationId, bitflag } = registeredComponent\n  const mask = world[$entityMasks][generationId][eid]\n  return (mask & bitflag) === bitflag\n}\n\n/**\n * Adds a component to an entity\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=false]\n */\nexport const addComponent = (world, component, eid, reset=false) => {\n  if (!Number.isInteger(eid)) {\n    component = world\n    world = eidToWorld.get(eid)\n    reset = eid || reset\n  }\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\n  if (hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n  \n  notQueries.forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryRemoveEntity(world, q, eid)\n  })\n  \n  // Add bitflag to entity bitmask\n  world[$entityMasks][generationId][eid] |= bitflag\n\n  // todo: archetype graph\n  queries.forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n\n  world[$entityComponents].get(eid).add(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n\n/**\n * Removes a component from an entity and resets component state unless otherwise specified.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=true]\n */\nexport const removeComponent = (world, component, eid, reset=true) => {\n  if (!Number.isInteger(eid)) {\n    component = world\n    world = eidToWorld.get(eid)\n    reset = eid || reset\n  }\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\n\n  // todo: archetype graph\n  queries.forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryRemoveEntity(world, q, eid)\n  })\n\n  // Remove flag from entity bitmask\n  world[$entityMasks][generationId][eid] &= ~bitflag\n  \n  notQueries.forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n  \n  world[$entityComponents].get(eid).delete(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n","import { $componentMap } from './Component'\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query'\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity'\nimport { resize } from './Storage'\nimport { SparseSet } from './Util'\n\nexport const $size = Symbol('size')\nexport const $resizeThreshold = Symbol('resizeThreshold')\nexport const $bitflag = Symbol('bitflag')\nexport const $archetypes = Symbol('archetypes')\nexport const $localEntities = Symbol('localEntities')\n\nexport const worlds = []\n\nexport const resizeWorlds = (size) => {\n  worlds.forEach(world => {\n    world[$size] = size\n\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size)\n    }\n    \n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\n  })\n}\n\n/**\n * Creates a new world.\n *\n * @returns {object}\n */\nexport const createWorld = () => {\n  const world = {}\n  resetWorld(world)\n  worlds.push(world)\n  return world\n}\n\n/**\n * Resets a world.\n *\n * @param {World} world\n * @returns {object}\n */\nexport const resetWorld = (world) => {\n  const size = getGlobalSize()\n  world[$size] = size\n\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\n\n  world[$entityMasks] = [new Uint32Array(size)]\n  world[$entityComponents] = new Map()\n  world[$archetypes] = []\n\n  world[$entitySparseSet] = SparseSet()\n  world[$entityArray] = world[$entitySparseSet].dense\n\n  world[$bitflag] = 1\n\n  world[$componentMap] = new Map()\n\n  world[$queryMap] = new Map()\n  world[$queries] = new Set()\n  world[$notQueries] = new Set()\n  world[$dirtyQueries] = new Set()\n\n  world[$localEntities] = new Map()\n\n  return world\n}\n\n/**\n * Deletes a world.\n *\n * @param {World} world\n */\nexport const deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\n  Object.keys(world).forEach(key => { delete world[key] })\n  worlds.splice(worlds.indexOf(world), 1)\n}\n","import { commitRemovals } from './Query'\n\n/**\n * Defines a new system function.\n *\n * @param {function} update\n * @returns {function}\n */\nexport const defineSystem = (fn1, fn2?) => {\n  const update = fn2 !== undefined ? fn2 : fn1\n  const create = fn2 !== undefined ? fn1 : undefined\n  const init = new Set()\n  const system = (world, ...args) => {\n    if (create && !init.has(world)) {\n      create(world, ...args)\n      init.add(world)\n    }\n    update(world, ...args)\n    commitRemovals(world)\n    return world\n  }\n\n  Object.defineProperty(system, 'name', {\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\n    configurable: true,\n  })\n\n  return system\n}","import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage\"\nimport { $componentMap, addComponent, hasComponent } from \"./Component\"\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity\"\nimport { $localEntities } from \"./World\"\n\nexport const DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n}\n\nlet resized = false\n\nexport const setSerializationResized = v => { resized = v }\n\nconst canonicalize = (target): [any[], Map<any, any>] => {\n  let componentProps = []\n  let changedProps = new Map()\n  if (Array.isArray(target)) {\n    componentProps = target\n      .map(p => {\n        if (!p) throw new Error('bitECS - Cannot serialize undefined component')\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\n          p()[$storeFlattened].forEach(prop => {\n            const $ = Symbol()\n            createShadow(prop, $)\n            changedProps.set(prop, $)\n          })\n          return p()[$storeFlattened]\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\n          return p[$storeFlattened]\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\n          return p\n        }\n      })\n      .reduce((a,v) => a.concat(v), [])\n  }\n  return [componentProps, changedProps]\n}\n\n/**\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\n *\n * @param {object|array} target\n * @param {number} [maxBytes=20000000]\n * @returns {function} serializer\n */\nexport const defineSerializer = (target, maxBytes = 20000000) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n\n  let [componentProps, changedProps] = canonicalize(target)\n\n  // TODO: calculate max bytes based on target & recalc upon resize\n\n  const buffer = new ArrayBuffer(maxBytes)\n  const view = new DataView(buffer)\n\n  return (ents) => {\n\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n    \n    let world\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents\n      ents = ents[$entityArray]\n    } else {\n      world = eidToWorld.get(ents[0])\n    }\n\n    if (!ents.length) return\n\n    let where = 0\n\n    // iterate over component props\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid]\n      const $diff = changedProps.get(prop)\n      \n      // write pid\n      view.setUint8(where, pid)\n      where += 1\n\n      // save space for entity count\n      const countWhere = where\n      where += 4\n      \n      let count = 0\n      // write eid,val\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i]\n\n        // skip if entity doesn't have this component\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\n          continue\n        }\n\n        // skip if diffing and no change\n        // TODO: optimize array diff\n        if ($diff) {\n          if (ArrayBuffer.isView(prop[eid])) {\n            let dirty = false\n            for (let i = 0; i < prop[eid].length; i++) {\n              if(prop[eid][i] !== prop[eid][$diff][i]) {\n                dirty = true\n                break\n              }\n            }\n            if (dirty) continue\n          } else if (prop[eid] === prop[$diff][eid]) continue\n        }\n\n        count++\n\n        // write eid\n        view.setUint32(where, eid)\n        where += 4\n\n        if (prop[$tagStore]) {\n          continue\n        }\n\n        // if property is an array\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace('Array', '')\n          const indexType = prop[eid][$indexType]\n          const indexBytes = prop[eid][$indexBytes]\n\n          // add space for count of dirty array elements\n          const countWhere2 = where\n          where += 1\n\n          let count2 = 0\n\n          // write index,value\n          for (let i = 0; i < prop[eid].length; i++) {\n            const value = prop[eid][i]\n\n            if ($diff && prop[eid][i] === prop[eid][$diff][i]) {\n              continue\n            }\n\n            // write array index\n            view[`set${indexType}`](where, i)\n            where += indexBytes\n\n            // write value at that index\n            view[`set${type}`](where, value)\n            where += prop[eid].BYTES_PER_ELEMENT\n            count2++\n          }\n\n          // write total element count\n          view[`set${indexType}`](countWhere2, count2)\n\n        } else {\n          // regular property values\n          const type = prop.constructor.name.replace('Array', '')\n          // set value next [type] bytes\n          view[`set${type}`](where, prop[eid])\n          where += prop.BYTES_PER_ELEMENT\n\n          // sync shadow state\n          if (prop[$diff]) prop[$diff][eid] = prop[eid]\n        }\n      }\n\n      view.setUint32(countWhere, count)\n    }\n    return buffer.slice(0, where)\n  }\n}\n\nconst newEntities = new Map()\n\n/**\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\n *\n * @param {object|array} target\n * @returns {function} deserializer\n */\nexport const defineDeserializer = (target) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n  let [componentProps] = canonicalize(target)\n\n\n  return (world, packet, mode=0) => {\n\n    newEntities.clear()\n    \n    if (resized) {\n      [componentProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n\n    const localEntities = world[$localEntities]\n\n    const view = new DataView(packet)\n    let where = 0\n\n    while (where < packet.byteLength) {\n\n      // pid\n      const pid = view.getUint8(where)\n      where += 1\n\n      // entity count\n      const entityCount = view.getUint32(where)\n      where += 4\n\n      // component property\n      const prop = componentProps[pid]\n\n      // Get the entities and set their prop values\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where)\n        where += 4\n\n        if (mode === DESERIALIZE_MODE.MAP) {\n\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid)\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid)\n          } else {\n            const newEid = addEntity(world)\n            localEntities.set(eid, newEid)\n            newEntities.set(eid, newEid)\n            eid = newEid\n          }\n        }\n\n        if (mode === DESERIALIZE_MODE.APPEND ||  \n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\n        ) {\n          const newEid = newEntities.get(eid) || addEntity(world)\n          newEntities.set(eid, newEid)\n          eid = newEid\n        }\n\n        const component = prop[$storeBase]()\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid)\n        }\n\n        if (component[$tagStore]) {\n          continue\n        }\n        \n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid]\n          const count = view[`get${array[$indexType]}`](where)\n          where += array[$indexBytes]\n\n          // iterate over count\n          for (let i = 0; i < count; i++) {\n            const index = view[`get${array[$indexType]}`](where)\n            where += array[$indexBytes]\n\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\n            where += array.BYTES_PER_ELEMENT\n\n            prop[eid][index] = value\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\n          where += prop.BYTES_PER_ELEMENT\n\n          prop[eid] = value\n        }\n      }\n    }\n  }\n}","import { createWorld, resetWorld, deleteWorld } from './World'\nimport { addEntity, removeEntity, setDefaultSize, getEntityComponents} from './Entity'\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component'\nimport { defineSystem } from './System'\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query'\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize'\nimport { TYPES_ENUM, parentArray } from './Storage'\n// import { defineProxy } from './Proxy'\n\nexport const pipe = (...fns) => (...args) => {\n  const input = Array.isArray(args[0]) ? args[0] : args\n  if (!input || input.length === 0) return\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\n  let tmp = input\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i]\n    if (Array.isArray(tmp)) {\n      // tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\n      tmp = fn(...tmp)\n    } else {\n      tmp = fn(tmp)\n    }\n  }\n  return tmp\n}\n\nexport const Types = TYPES_ENUM\n\nexport {\n\n  setDefaultSize,\n  createWorld,\n  resetWorld,\n  deleteWorld,\n  addEntity,\n  removeEntity,\n\n  registerComponent,\n  registerComponents,\n  defineComponent,\n  addComponent,\n  removeComponent,\n  hasComponent,\n  getEntityComponents,\n  // entityChanged,\n\n  // defineProxy,\n\n  defineQuery,\n  Changed,\n  Not,\n  // Or,\n  enterQuery,\n  exitQuery,\n  commitRemovals,\n  resetChangedQuery,\n  removeQuery,\n\n  defineSystem,\n  \n  defineSerializer,\n  defineDeserializer,\n  DESERIALIZE_MODE,\n\n  parentArray,\n\n}\n"],"names":[],"mappings":"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"}